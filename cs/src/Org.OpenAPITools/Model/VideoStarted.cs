/* 
 * Events
 *
 * Polymorphism example
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The video is started
    /// </summary>
    [DataContract]
    public partial class VideoStarted : Arg,  IEquatable<VideoStarted>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoStarted" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoStarted() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoStarted" /> class.
        /// </summary>
        /// <param name="videoUrl">videoUrl.</param>
        /// <param name="argType">argType (required).</param>
        public VideoStarted(string videoUrl = default(string), string argType = default(string)) : base(argType)
        {
            this.VideoUrl = videoUrl;
        }
        
        /// <summary>
        /// Gets or Sets VideoUrl
        /// </summary>
        [DataMember(Name="videoUrl", EmitDefaultValue=false)]
        public string VideoUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VideoStarted {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  VideoUrl: ").Append(VideoUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoStarted);
        }

        /// <summary>
        /// Returns true if VideoStarted instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoStarted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoStarted input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.VideoUrl == input.VideoUrl ||
                    (this.VideoUrl != null &&
                    this.VideoUrl.Equals(input.VideoUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.VideoUrl != null)
                    hashCode = hashCode * 59 + this.VideoUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
