/* 
 * Events
 *
 * Polymorphism example
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Arg
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "ArgType")]
    [JsonSubtypes.KnownSubType(typeof(Navigated), "Navigated")]
    [JsonSubtypes.KnownSubType(typeof(VideoStarted), "VideoStarted")]
    [JsonSubtypes.KnownSubType(typeof(VideoStarted), "VideoStarted")]
    [JsonSubtypes.KnownSubType(typeof(Navigated), "Navigated")]
    public partial class Arg :  IEquatable<Arg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Arg" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Arg() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Arg" /> class.
        /// </summary>
        /// <param name="argType">argType (required).</param>
        public Arg(string argType = default(string))
        {
            // to ensure "argType" is required (not null)
            this.ArgType = argType ?? throw new ArgumentNullException("argType is a required property for Arg and cannot be null");;
        }
        
        /// <summary>
        /// Gets or Sets ArgType
        /// </summary>
        [DataMember(Name="argType", EmitDefaultValue=false)]
        public string ArgType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Arg {\n");
            sb.Append("  ArgType: ").Append(ArgType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Arg);
        }

        /// <summary>
        /// Returns true if Arg instances are equal
        /// </summary>
        /// <param name="input">Instance of Arg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Arg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArgType == input.ArgType ||
                    (this.ArgType != null &&
                    this.ArgType.Equals(input.ArgType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArgType != null)
                    hashCode = hashCode * 59 + this.ArgType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
